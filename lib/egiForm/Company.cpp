//
// 
// PLEASE DO NOT EDIT THIS FILE. AUTO-GENERATED.
//


#include <string>
#include <sstream>
#include <vector>
#include "Company.h"

void Company::SET_VALID_BIT_COMPANYSYMBOL() { valid = valid | (0x1 << 0); }

void Company::SET_VALID_BIT_COMPANYNAME() { valid = valid | (0x1 << 1); }

void Company::SET_VALID_BIT_MARKETVALUE() { valid = valid | (0x1 << 2); }

void Company::SET_VALID_BIT_CEO() { valid = valid | (0x1 << 3); }

void Company::SET_VALID_BIT_INDUSTRY() { valid = valid | (0x1 << 4); }

std::string Company::db_create_stmt() { 
            
    std::string stmt = "CREATE TABLE COMPANY ( COMPANYSYMBOL TEXT PRIMARY KEY NOT NULL, COMPANYNAME TEXT NOT NULL, MARKETVALUE INT NOT NULL, CEO TEXT NOT NULL, INDUSTRY TEXT NOT NULL );";
    return stmt;  

}


std::string Company::db_insert_stmt() { 
            
    std::string stmt = "INSERT INTO COMPANY ( ";
    std::stringstream stmt_out;
    stmt_out << stmt << "COMPANYSYMBOL, COMPANYNAME, MARKETVALUE, CEO, INDUSTRY" << " ) VALUES ( " <<  " \"" << companySymbol << "\""    << ", \"" << companyName << "\""  << ", " << MarketValue << ", \"" << CEO << "\""  << ", \"" << industry << "\""  << ");";
    return stmt_out.str();    

}


std::string Company::db_select_stmt( const std::vector<std::string> primaryKey ) { 
            
    std::string stmt = "SELECT ";
    std::stringstream stmt_out;
    int firstEntry = 1;
    stmt_out << stmt ;
    
	stmt_out << "COMPANYSYMBOL";
	if ( COMPANY_COMPANYNAME_VALID_FLAG & valid ) {
		stmt_out << ",COMPANYNAME";}
	if ( COMPANY_MARKETVALUE_VALID_FLAG & valid ) {
		stmt_out << ",MARKETVALUE";}
	if ( COMPANY_CEO_VALID_FLAG & valid ) {
		stmt_out << ",CEO";}
	if ( COMPANY_INDUSTRY_VALID_FLAG & valid ) {
		stmt_out << ",INDUSTRY";};
    stmt_out << " FROM COMPANY " ;
    // primary key
    if ( primaryKey.size() > 0 ) { // 0 means all records from the table
         stmt_out << " WHERE ";
        for (int i = 0; i < primaryKey.size() ; i++ ) {
           if ( i == 0 )  stmt_out << " ( companySymbol  = '" << primaryKey[i] << "' )";
           else        stmt_out << " or ( companySymbol  = '" << primaryKey[i] << "' )";
        }   
    }
    stmt_out << ";";
    return stmt_out.str();  

}


std::string Company::db_update_stmt(std::string key) { 
            
    std::string stmt = "UPDATE COMPANY SET ";
    std::stringstream stmt_out;
    int firstEntry = 1;
    stmt_out << stmt ;
    
	if ( COMPANY_COMPANYNAME_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "COMPANYNAME=\"" << companyName << "\""; }
		else {  stmt_out << ",COMPANYNAME=\"" << companyName << "\"";}
	}
	if ( COMPANY_MARKETVALUE_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "MARKETVALUE=" << MarketValue; }
		else {  stmt_out << ",MARKETVALUE=" << MarketValue;}
	}
	if ( COMPANY_CEO_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "CEO=\"" << CEO << "\""; }
		else {  stmt_out << ",CEO=\"" << CEO << "\"";}
	}
	if ( COMPANY_INDUSTRY_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "INDUSTRY=\"" << industry << "\""; }
		else {  stmt_out << ",INDUSTRY=\"" << industry << "\"";}
	};
    stmt_out << " WHERE COMPANYSYMBOL = '" << key << "';";

    return stmt_out.str(); 

}


std::string Company::db_delete_stmt(std::string key) { 
            
    std::string stmt = "DELETE FROM COMPANY WHERE COMPANYSYMBOL = ";
    std::stringstream stmt_out;
    stmt_out << stmt << "'" << key <<"';";
    return stmt_out.str();  

}

Company::~Company() {}
Company::Company():companySymbol("S&P"),companyName(""),MarketValue(0),CEO(""),industry("") {}