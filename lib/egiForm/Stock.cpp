//
// 
// PLEASE DO NOT EDIT THIS FILE. AUTO-GENERATED.
//


#include <string>
#include <sstream>
#include <vector>
#include "Stock.h"

void Stock::SET_VALID_BIT_COMPANYSYMBOL() { valid = valid | (0x1 << 0); }

void Stock::SET_VALID_BIT_COMPANYNAME() { valid = valid | (0x1 << 1); }

void Stock::SET_VALID_BIT_LASTTRADEPRICEONLY() { valid = valid | (0x1 << 2); }

void Stock::SET_VALID_BIT_CHANGE() { valid = valid | (0x1 << 3); }

void Stock::SET_VALID_BIT_CHANGEINPERCENT() { valid = valid | (0x1 << 4); }

std::string Stock::db_create_stmt() { 
            
    std::string stmt = "CREATE TABLE STOCK ( COMPANYSYMBOL TEXT PRIMARY KEY NOT NULL, COMPANYNAME TEXT NOT NULL, LASTTRADEPRICEONLY INT NOT NULL, CHANGE INT NOT NULL, CHANGEINPERCENT INT NOT NULL );";
    return stmt;  

}


std::string Stock::db_insert_stmt() { 
            
    std::string stmt = "INSERT INTO STOCK ( ";
    std::stringstream stmt_out;
    stmt_out << stmt << "COMPANYSYMBOL, COMPANYNAME, LASTTRADEPRICEONLY, CHANGE, CHANGEINPERCENT" << " ) VALUES ( " <<  " \"" << companySymbol << "\""    << ", \"" << companyName << "\""  << ", " << lastTradePriceOnly << ", " << change << ", " << changeInPercent << ");";
    return stmt_out.str();    

}


std::string Stock::db_select_stmt( const std::vector<std::string> primaryKey ) { 
            
    std::string stmt = "SELECT ";
    std::stringstream stmt_out;
    int firstEntry = 1;
    stmt_out << stmt ;
    
	stmt_out << "COMPANYSYMBOL";
	if ( STOCK_COMPANYNAME_VALID_FLAG & valid ) {
		stmt_out << ",COMPANYNAME";}
	if ( STOCK_LASTTRADEPRICEONLY_VALID_FLAG & valid ) {
		stmt_out << ",LASTTRADEPRICEONLY";}
	if ( STOCK_CHANGE_VALID_FLAG & valid ) {
		stmt_out << ",CHANGE";}
	if ( STOCK_CHANGEINPERCENT_VALID_FLAG & valid ) {
		stmt_out << ",CHANGEINPERCENT";};
    stmt_out << " FROM STOCK " ;
    // primary key
    if ( primaryKey.size() > 0 ) { // 0 means all records from the table
         stmt_out << " WHERE ";
        for (int i = 0; i < primaryKey.size() ; i++ ) {
           if ( i == 0 )  stmt_out << " ( companySymbol  = '" << primaryKey[i] << "' )";
           else        stmt_out << " or ( companySymbol  = '" << primaryKey[i] << "' )";
        }   
    }
    stmt_out << ";";
    return stmt_out.str();  

}


std::string Stock::db_update_stmt(std::string key) { 
            
    std::string stmt = "UPDATE STOCK SET ";
    std::stringstream stmt_out;
    int firstEntry = 1;
    stmt_out << stmt ;
    
	if ( STOCK_COMPANYNAME_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "COMPANYNAME=\"" << companyName << "\""; }
		else {  stmt_out << ",COMPANYNAME=\"" << companyName << "\"";}
	}
	if ( STOCK_LASTTRADEPRICEONLY_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "LASTTRADEPRICEONLY=" << lastTradePriceOnly; }
		else {  stmt_out << ",LASTTRADEPRICEONLY=" << lastTradePriceOnly;}
	}
	if ( STOCK_CHANGE_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "CHANGE=" << change; }
		else {  stmt_out << ",CHANGE=" << change;}
	}
	if ( STOCK_CHANGEINPERCENT_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "CHANGEINPERCENT=" << changeInPercent; }
		else {  stmt_out << ",CHANGEINPERCENT=" << changeInPercent;}
	};
    stmt_out << " WHERE COMPANYSYMBOL = '" << key << "';";

    return stmt_out.str(); 

}


std::string Stock::db_delete_stmt(std::string key) { 
            
    std::string stmt = "DELETE FROM STOCK WHERE COMPANYSYMBOL = ";
    std::stringstream stmt_out;
    stmt_out << stmt << "'" << key <<"';";
    return stmt_out.str();  

}

Stock::~Stock() {}
Stock::Stock():companySymbol("S&P"),companyName(""),lastTradePriceOnly(0),change(0),changeInPercent(0) {}